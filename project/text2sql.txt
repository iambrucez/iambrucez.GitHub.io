2:I[9275,[],""]
3:I[1343,[],""]
4:I[2224,["291","static/chunks/291-de708f65a06c2e3a.js","348","static/chunks/app/project/layout-6bf82984f53064f2.js"],"default"]
5:I[1804,["185","static/chunks/app/layout-2fb9a46769555ecd.js"],"default"]
0:["IK1P7h3QRNwfMrPb7GjZ5",[[["",{"children":["project",{"children":["text2sql",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["project",{"children":["text2sql",{"children":["__PAGE__",{},[["$L1",[["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"\"Hmm, I wonder how LLMs can be used to translate natural language instructions into SQL queries. ðŸ¤”\""}],"\n"]}],"\n",["$","p",null,{"children":[["$","a",null,{"href":"https://github.com/iamyufan/text2sql","children":"[GitHub Repo]"}],"\n",["$","a",null,{"href":"https://colab.research.google.com/drive/1taPVOrJ13UC4vnqTlMaJDrCXZYhjItHb#scrollTo=FZlMYp5PTYDE","children":"[Colab]"}]]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"Introduction"}],"\n",["$","p",null,{"children":"Writing SQL queries to solve analytical and business-critical questions is a common task for data analysts and data scientists. However, writing SQL queries can be challenging for those who are not familiar with SQL syntax. In this project, I aim to explore different solutions to the task of translating natural language instructions into SQL queries. Specifically, I experimented with three different approaches:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["Fine-tuning a pre-trained encoder-decoder transformer model, the ",["$","a",null,{"href":"https://huggingface.co/docs/transformers/en/model_doc/t5","children":"T5 model"}],"."]}],"\n",["$","li",null,{"children":"Training a model with the same architecture from scratch."}],"\n",["$","li",null,{"children":"Using diverse prompt engineering techniques with a large language model (LLM)."}],"\n"]}],"\n",["$","h2",null,{"children":"Dataset"}],"\n",["$","p",null,{"children":["For this project, I used a dataset consisting of natural language instructions and their corresponding SQL queries, which target the ",["$","a",null,{"href":"https://github.com/iamyufan/text2sql/blob/main/data/flight_database.db","children":["$","code",null,{"children":"flight_database.db"}]}],". The database schema, outlined in the ",["$","a",null,{"href":"https://github.com/iamyufan/text2sql/blob/main/data/flight_database.schema","children":["$","code",null,{"children":"flight_database.schema"}]}]," file, includes 25 tables such as \"airline,\" \"restriction,\" and \"flight.\" Each table's schema details the columns, their types, and whether they are indexed."]}],"\n",["$","p",null,{"children":["The text-to-SQL data is divided into training, development, and held-out test sets. Each natural language instruction (in ",["$","code",null,{"children":".nl"}]," files) is paired with a ground-truth SQL query (in ",["$","code",null,{"children":".sql"}]," files). Here are some examples from the training set:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Natural Language Instruction:"}]," List all the flights that arrive at General Mitchell International from various cities."]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"SQL Query:"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-sql","children":"SELECT DISTINCT\n    flight_1.flight_id\nFROM\n    flight flight_1,\n    airport airport_1,\n    airport_service airport_service_1,\n    city city_1\nWHERE\n    flight_1.to_airport = airport_1.airport_code\n    AND airport_1.airport_code = 'MKE'\n    AND flight_1.from_airport = airport_service_1.airport_code\n    AND airport_service_1.city_code = city_1.city_code\n"}]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","strong",null,{"children":"Natural Language Instruction:"}]," How much is a first-class ticket from Boston to San Francisco?"]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"SQL Query:"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-sql","children":"SELECT DISTINCT\n    fare_1.fare_id\nFROM\n    fare fare_1,\n    fare_basis fare_basis_1,\n    flight_fare flight_fare_1,\n    flight flight_1,\n    airport_service airport_service_1,\n    city city_1,\n    airport_service airport_service_2,\n    city city_2\nWHERE\n    fare_1.fare_basis_code = fare_basis_1.fare_basis_code\n    AND fare_basis_1.class_type = 'FIRST'\n    AND fare_1.fare_id = flight_fare_1.fare_id\n    AND flight_fare_1.flight_id = flight_1.flight_id\n    AND flight_1.from_airport = airport_service_1.airport_code\n    AND airport_service_1.city_code = city_1.city_code\n    AND city_1.city_name = 'BOSTON'\n    AND flight_1.to_airport = airport_service_2.airport_code\n    AND airport_service_2.city_code = city_2.city_code\n    AND city_2.city_name = 'SAN FRANCISCO'\n"}]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":"To evaluate the models, I compared the generated SQL queries with the ground-truth queries using the F1 metric to ensure they return the same database records."}],"\n",["$","h2",null,{"children":"Methods"}],"\n",["$","h3",null,{"children":"Working with the T5 Architecture"}],"\n",["$","p",null,{"children":["I will be working with the small variant of the ",["$","a",null,{"href":"https://arxiv.org/abs/1910.10683","children":"T5 encoder-decoder architecture"}]," (Raffel et al., 2019). The encoder will ingest natural language queries (i.e., the input sequence) while the decoder will predict the corresponding SQL queries (i.e., the output sequence). My first task will be to finetune the pretrained T5 architecture while your second task will be to train the exact same architecture from scratch (i.e., from randomly initialized weights)."]}],"\n",["$","p",null,{"children":"For either task, I expect simply implementing data processing with the existing T5 tokenizer and varying simple hyperparameters should lead to good baseline results. During finetuning, a common design choice is to freeze part of the model parameters (i.e., only finetune a subset of the parameters)."}],"\n",["$","p",null,{"children":"Here are some design choices I have made to get the best-performing fine-tuned T5 model:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Tokenization"}],": Utilized the Hugging Face T5 tokenizer (\"google-t5/t5-small\") with padding and truncation enabled to ensure consistent batch processing."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Architecture"}],": Only the decoder's parameters were updated during fine-tuning, with the encoder's parameters frozen to preserve pre-learned contextual representations."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Hyperparameters"}],": Trained using a batch size of 16, across 20 epochs, with an AdamW optimizer set to a learning rate of 5e-5."]}],"\n"]}],"\n",["$","p",null,{"children":"Similarly, here are the design choices I have made to train the T5 model from scratch:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Tokenization"}],": Used the same Hugging Face T5 tokenizer (\"google-t5/t5-small\") with padding and truncation enabled for uniform input and output processing."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Hyperparameters"}],": Configured with a batch size of 16, trained over 50 epochs, using an AdamW optimizer with a learning rate of 5e-5."]}],"\n"]}],"\n",["$","h3",null,{"children":"Task 3: Prompting & In-context Learning with Large Language Models"}],"\n",["$","p",null,{"children":["For this task, I have experimented with in-context learning (ICL) using an LLM. I used the instruction-tuned Gemma 1.1 2B model. The LLM is frozen here, and will perform the generation task while only conditioned on the text input (prompt). I need to design prompts to experiment with zero- and few-shot prompting. In the zero-shot case, I provided instructions in the prompt, but it doesnâ€™t include examples that show the intended behaviour. In the few-shot case, I also included examples showing the intented behaviour. I have experimented with different value of ",["$","code",null,{"children":"k"}],", which is the number of examples. For few-shot prompting, I also need to experiment with different ways of selecting the examples, observe how the design choice affects the performance, and how sensitive performance is to the selection of ICL examples. In the prompt, whether to also provide additional context and indications is also worth a try, for instance, about the task, the database, or details about the intended behavior."]}],"\n",["$","p",null,{"children":"Here is how I have designed the prompts for the zero-shot and few-shot prompting:"}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/projects/text2sql/prompt_design.png","alt":"Prompt Design"}]}],"\n",["$","h4",null,{"children":"How to select the examples for few-shot prompting?"}],"\n",["$","p",null,{"children":"For selecting the examples when ( k > 0 ) in my few-shot prompting, I employed a straightforward random selection approach. This method involves choosing ( k ) distinct example pairs randomly from the training dataset. Each pair consists of a natural language instruction and its corresponding SQL query."}],"\n",["$","h2",null,{"children":"Evaluation"}],"\n",["$","h3",null,{"children":"LLM Prompting"}],"\n",["$","p",null,{"children":["I have experimented with different value (0, 1, 3) of ",["$","code",null,{"children":"k"}]," in the few-shot prompting strategy to evaluate the effectiveness of the prompts in guiding the model to generate accurate SQL queries."]}],"\n",["$","p",null,{"children":"Besides experimenting with the number of examples, I have also conducted ablations to evaluate the impact of different components of the prompt on the model's performance. The ablations are as follows:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Prompting Variant 3: Removed the data schema. This experiment tested the necessity of explicitly giving the model the database schema include the table names and the column names."}],"\n",["$","li",null,{"children":"Prompting Variant 4: Removed the instruction \"Using valid SQL, answer the following questions for the tables provided above. Please do not generate more information other than the SQL queries.\" This experiment tested the necessity of explicitly guiding the model to restrict its responses to SQL queries only."}],"\n",["$","li",null,{"children":"Prompting Variant 5: Removed the markdown SQL block indicators (```sql and ```). This ablation tested whether these formatting markers impact the model's ability to correctly format SQL queries."}],"\n"]}],"\n",["$","p",null,{"children":"The results of these ablations are shown in the table below:"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"System"}],["$","th",null,{"children":"Query EM"}],["$","th",null,{"children":"F1 score"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["Full model (",["$","code",null,{"children":"k = 0"}],")"]}],["$","td",null,{"children":["$","strong",null,{"children":"0.02789"}]}],["$","td",null,{"children":["$","strong",null,{"children":"0.19305"}]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["Variant 1 (",["$","code",null,{"children":"k = 0"}],")"]}],["$","td",null,{"children":"0.00000"}],["$","td",null,{"children":"0.11779"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["Variant 2 (",["$","code",null,{"children":"k = 3"}],")"]}],["$","td",null,{"children":"0.00643"}],["$","td",null,{"children":"0.13350"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Variant 3 (ablating the database schema)"}],["$","td",null,{"children":"0.00643"}],["$","td",null,{"children":"0.14559"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Variant 4 (ablating the instruction sentence)"}],["$","td",null,{"children":"0.02361"}],["$","td",null,{"children":"0.17792"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Variant 5 (ablating the formatting markers)"}],["$","td",null,{"children":"0.00643"}],["$","td",null,{"children":"0.14702"}]]}]]}]]}],"\n",["$","p",null,{"children":["For ICL, I also visualized the Record F1 on the development set that the model achieved with different values of ",["$","code",null,{"children":"k"}],"."]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/projects/text2sql/f1.png","alt":"ICL Performance"}]}],"\n",["$","h3",null,{"children":"T5 Model"}],"\n",["$","p",null,{"children":"The tables below shows the results of the fine-tuned T5 model and the T5 model trained from scratch:"}],"\n",["$","p",null,{"children":"Fine-tuned T5 model:"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"System"}],["$","th",null,{"children":"Query EM"}],["$","th",null,{"children":"F1 score"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Full model"}],["$","td",null,{"children":"0.01716"}],["$","td",null,{"children":"0.62742"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Variant 1 (unfreeze the last layer)"}],["$","td",null,{"children":"0.01502"}],["$","td",null,{"children":"0.54246"}]]}]]}]]}],"\n",["$","p",null,{"children":"T5 model trained from scratch:"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"System"}],["$","th",null,{"children":"Query EM"}],["$","th",null,{"children":"F1 score"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Full model"}],["$","td",null,{"children":"0.02360"}],["$","td",null,{"children":"0.57552"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Variant 1 (training for 20 epochs)"}],["$","td",null,{"children":"0.02145"}],["$","td",null,{"children":"0.48829"}]]}]]}]]}],"\n",["$","h3",null,{"children":"Results on the held-out test set"}],"\n",["$","p",null,{"children":"The tables below show the results of the best-performing models on the held-out test set:"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"System"}],["$","th",null,{"children":"F1 score"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"LLM with few-shot prompting (k = 3)"}],["$","td",null,{"children":"0.15003"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Fine-tuned T5 model"}],["$","td",null,{"children":"0.61011"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Trained T5 model from scratch"}],["$","td",null,{"children":"0.52191"}]]}]]}]]}],"\n",["$","h3",null,{"children":"Qualitative Error Analysis"}],"\n",["$","p",null,{"children":"I have also conducted a qualitative error analysis to identify the types of errors made by the models. Here are some examples of the errors made by the models:"}],"\n",["$","h4",null,{"children":"Un-existing Column"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Relevent Models"}],": All models"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Example"}],": Column ",["$","code",null,{"children":"departure_airport"}]," does not exist:","\n",["$","pre",null,{"children":["$","code",null,{"className":"language-sql","children":"SELECT * FROM flight WHERE departure_airport = 'ORD' AND arrival_airport = 'MCI' AND flight_date = '2023-06-17'\n"}]}],"\n"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Error Desciption"}],": The model generates queries with columns that do not exist in the database schema."]}],"\n"]}],"\n",["$","h4",null,{"children":"Syntax Error"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Relevent Models"}],": All models"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Example"}],": One extra \")\":","\n",["$","pre",null,{"children":["$","code",null,{"className":"language-sql","children":"... WHERE flight_1.from_airport = airport_service_1.airport_code AND ... AND( flight_1.arrival_time >= 1600 ) AND( flight_1.flight_days = days_1.days_code ...\n"}]}],"\n"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Error Desciption"}],": Syntax errors such as unmatched parentheses disrupt the SQL query structure, leading to execution failures."]}],"\n"]}],"\n",["$","h4",null,{"children":"Logic Error"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Relevent Models"}],": All models"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Example"}],":\nNatural language text: \"What flights are available tomorrow from Denver to Philadelphia?\"\nGenerated:","\n",["$","pre",null,{"children":["$","code",null,{"className":"language-sql","children":"SELECT f.* FROM flight f JOIN flight\\_stop fs ON f.to\\_airport = fs.departure\\_airport JOIN city c ON fs.stop\\_airport = c.city\\_name WHERE f.departure\\_date = DATE\\_ADD(NOW(), INTERVAL 1 DAY)\n"}]}],"\n"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Error Desciption"}],": The model fails to correctly interpret the logic of the query, such as mismatching join conditions or incorrect fields in ",["$","code",null,{"children":"SELECT"}]," clause."]}],"\n"]}],"\n",["$","h2",null,{"children":"Conclusion"}],"\n",["$","p",null,{"children":"In this project, I have explored three different approaches to the task of translating natural language instructions into SQL queries. I have experimented with fine-tuning a pre-trained encoder-decoder transformer model (T5), training a model with the same architecture from scratch, and using diverse prompt engineering techniques with a large language model (LLM). The results show that the fine-tuned T5 model achieved the best performance in terms of F1 score, while the LLM with few-shot prompting also showed promising results. The qualitative error analysis revealed that the models struggled with errors such as generating queries with non-existent columns, syntax errors, and logic errors. Future work could focus on improving the models' ability to handle these types of errors, as well as exploring more sophisticated prompt engineering techniques to guide the models towards generating more accurate SQL queries."}]]],null],null]},["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","project","children","text2sql","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","$L4",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","project","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],"params":{}}],null],null]},[["$","html",null,{"lang":"en","className":"__className_6b8127","children":["$","$L5",null,{"children":[["$","head",null,{}],["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2a1054080b77ae12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/f9d0befeed0504e9.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2c8f6a03b5c2a59f.css","precedence":"next","crossOrigin":"$undefined"}]],"$L6"]]]]
6:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Yufan Zhang"}],["$","meta","3",{"name":"description","content":"Yufan Zhang's personal website"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
